// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6329.UglyBuckling;

import org.usfirst.frc6329.UglyBuckling.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc6329.UglyBuckling.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick xbox;
    public JoystickButton pauseIntake;
    public JoystickButton intake;
    public JoystickButton launch;
    public JoystickButton pauseWinch;
    public JoystickButton stopLaunch;
    public JoystickButton runWinch;
    public JoystickButton outWinch;
    public JoystickButton inWinch;
    public Joystick flightStick;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        flightStick = new Joystick(1);
        
        inWinch = new JoystickButton(flightStick, 9);
        inWinch.whenPressed(new WinchIn());
        outWinch = new JoystickButton(flightStick, 11);
        outWinch.whenPressed(new WinchOut());
        runWinch = new JoystickButton(flightStick, 11);
        runWinch.whenPressed(new StartWinch());
        stopLaunch = new JoystickButton(flightStick, 1);
        stopLaunch.whenReleased(new LauncherStop());
        pauseWinch = new JoystickButton(flightStick, 12);
        pauseWinch.whenPressed(new StopWinch());
        launch = new JoystickButton(flightStick, 1);
        launch.whileHeld(new FireLauncher());
        intake = new JoystickButton(flightStick, 3);
        intake.whenPressed(new IntakeStart());
        pauseIntake = new JoystickButton(flightStick, 4);
        pauseIntake.whenPressed(new IntakePause());
        xbox = new Joystick(0);
        


        // SmartDashboard Buttons
        SmartDashboard.putData("Auto Fire", new AutoFire());
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("Joystick Drive", new JoystickDrive());
        SmartDashboard.putData("Intake Start", new IntakeStart());
        SmartDashboard.putData("Intake Pause", new IntakePause());
        SmartDashboard.putData("FireLauncher", new FireLauncher());
        SmartDashboard.putData("Launcher Stop", new LauncherStop());
        SmartDashboard.putData("Start Winch", new StartWinch());
        SmartDashboard.putData("Stop Winch", new StopWinch());
        SmartDashboard.putData("Winch In", new WinchIn());
        SmartDashboard.putData("Winch Out", new WinchOut());
        SmartDashboard.putData("Start Compressor", new StartCompressor());
        SmartDashboard.putData("Simple Autonomous", new SimpleAutonomous());
        SmartDashboard.putData("Blue 1", new Blue1());
        SmartDashboard.putData("Blue 2", new Blue2());
        SmartDashboard.putData("Blue 3", new Blue3());
        SmartDashboard.putData("Red 1", new Red1());
        SmartDashboard.putData("Red 2", new Red2());
        SmartDashboard.putData("Red 3", new Red3());
        SmartDashboard.putData("Drive Forward", new DriveForward());
        SmartDashboard.putData("Turn Blue 1", new TurnBlue1());
        SmartDashboard.putData("Turn Blue 3", new TurnBlue3());
        SmartDashboard.putData("Forward Blue 1A", new ForwardBlue1A());
        SmartDashboard.putData("Forward Blue 1B", new ForwardBlue1B());
        SmartDashboard.putData("Forward Blue 1C", new ForwardBlue1C());
        SmartDashboard.putData("Forward Blue 1D", new ForwardBlue1D());
        SmartDashboard.putData("Backup Turn", new BackupTurn());
        SmartDashboard.putData("Backward Blue ", new BackwardBlue());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        Compressor c = new Compressor(0);
        boolean pressureSwitch = c.getPressureSwitchValue();
        if (pressureSwitch == true) {
        	new StartCompressor();
        }
        
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getXbox() {
        return xbox;
    }

    public Joystick getFlightStick() {
        return flightStick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}
